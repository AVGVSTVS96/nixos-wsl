#!/usr/bin/env bash

# ANSI color codes
RED="$(printf '\033[0;31m')"
GREEN="$(printf '\033[0;32m')"
YELLOW="$(printf '\033[1;33m')"
BLUE="$(printf '\033[0;34m')"
NC="$(printf '\033[0m')" # No Color

# Check for sudo access upfront
check_sudo() {
  if ! sudo -n true 2>/dev/null; then
    echo -e "${YELLOW}Some checks require sudo access. Please enter your password if prompted.${NC}"
    if ! sudo -v; then
      echo -e "${RED}Failed to get sudo access. Will skip system key checks.${NC}"
      return 1
    fi
  fi
  # Keep sudo alive in the background
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done 2>/dev/null &
  return 0
}

# Separate system and user keys
SYSTEM_KEYS=(
  "/etc/ssh/ssh_host_ed25519_key"
)

USER_KEYS=(
  "$HOME/.ssh/id_ed25519"
  # "$HOME/.ssh/id_rsa"
  "$HOME/.secrets/master.age.key"
)

check_key() {
  local key_path="$1"
  local use_sudo="$2"
  local perms
  local readable
  local stat_cmd="stat"
  local grep_cmd="grep"

  echo -e "${BLUE}Checking ${key_path}...${NC}"

  # Use sudo for commands if needed
  if [[ "$use_sudo" == "true" ]]; then
    stat_cmd="sudo stat"
    grep_cmd="sudo grep"
  fi

  # Check if file exists
  if [[ "$use_sudo" == "true" ]]; then
    if ! sudo test -f "$key_path"; then
      echo -e "${YELLOW}✗ File not found${NC}"
      return 1
    fi
  else
    if [[ ! -f "$key_path" ]]; then
      echo -e "${YELLOW}✗ File not found${NC}"
      return 1
    fi
  fi

  # Get file permissions and ownership
  perms="$($stat_cmd -c "%a %U:%G" "$key_path")"

  if [[ "$use_sudo" == "true" ]]; then
    readable="no (requires root)"
  else
    readable="$(if [[ -r "$key_path" ]]; then echo "yes"; else echo "no"; fi)"
  fi

  echo -e "${GREEN}✓ Found key:${NC}"
  echo "  - Permissions: $perms"
  echo "  - Readable by current user: $readable"

  # Check if permissions are secure (600 or stricter)
  if [[ $($stat_cmd -c "%a" "$key_path") =~ ^[0-6]00$ ]]; then
    echo -e "${GREEN}✓ Permissions are secure${NC}"
  else
    echo -e "${RED}! Warning: Permissions are too open${NC}"
    echo "  Recommended: chmod 600 $key_path"
  fi

  # Validate key content
  if $grep_cmd -q "PRIVATE KEY\|AGE-SECRET-KEY-" "$key_path" 2>/dev/null; then
    echo -e "${GREEN}✓ File appears to be a valid key${NC}"
    return 0
  else
    echo -e "${YELLOW}? Unable to validate key format${NC}"
    return 1
  fi
}

found_valid_key=false
valid_keys=0
total_keys=0

# Get sudo access upfront if needed
have_sudo=false
if check_sudo; then
  have_sudo=true
fi

# First check system keys (only if we have sudo)
if [[ "$have_sudo" == "true" ]]; then
  echo -e "${BLUE}=== Checking system key locations ===${NC}\n"
  for key_path in "${SYSTEM_KEYS[@]}"; do
    total_keys=$((total_keys + 1))
    if check_key "$key_path" true; then
      found_valid_key=true
      valid_keys=$((valid_keys + 1))
    fi
    echo # Add blank line between checks
  done
else
  echo -e "${YELLOW}Skipping system key checks due to lack of sudo access${NC}\n"
fi

# Then check user keys without sudo
echo -e "${BLUE}=== Checking user key locations ===${NC}\n"
for key_path in "${USER_KEYS[@]}"; do
  total_keys=$((total_keys + 1))
  if check_key "$key_path" false; then
    found_valid_key=true
    valid_keys=$((valid_keys + 1))
  fi
  echo # Add blank line between checks
done

echo -e "${BLUE}=== Summary ===${NC}"
echo -e "Total locations checked: ${total_keys}"
echo -e "Valid keys found: ${valid_keys}"

if [[ "$found_valid_key" = false ]]; then
  echo -e "\n${RED}Warning: No valid keys found in any location.${NC}"
  exit 1
else
  echo -e "\n${GREEN}At least one valid key was found.${NC}"
  exit 0
fi
